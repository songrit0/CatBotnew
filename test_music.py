"""
‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏•‡∏á - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏•‡∏á
"""
import asyncio
import unittest
from unittest.mock import Mock, AsyncMock
import sys
import os

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import modules
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from music_manager import MusicManager, Song, MusicQueue, YTDLSource

class TestMusicSystem(unittest.TestCase):
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏•‡∏á"""
    
    def setUp(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        self.bot = Mock()
        self.music_manager = MusicManager(self.bot)
        self.guild_id = 12345
        
    def test_music_queue_basic_operations(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á"""
        queue = MusicQueue()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏ß‡πà‡∏≤‡∏á
        self.assertEqual(len(queue.queue), 0)
        self.assertIsNone(queue.current_song)
        self.assertIsNone(queue.get_next())
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á
        mock_user = Mock()
        mock_user.mention = "@TestUser"
        song1 = Song("url1", "‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1", "3:30", mock_user)
        song2 = Song("url2", "‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö 2", "4:15", mock_user)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á
        queue.add(song1)
        queue.add(song2)
        self.assertEqual(len(queue.queue), 2)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        next_song = queue.get_next()
        self.assertEqual(next_song.title, "‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1")
        self.assertEqual(len(queue.queue), 1)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö current_song
        queue.current_song = next_song
        self.assertEqual(queue.current_song.title, "‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1")
        
    def test_loop_functionality(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏π‡∏õ"""
        queue = MusicQueue()
        mock_user = Mock()
        mock_user.mention = "@TestUser"
        
        song1 = Song("url1", "‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1", "3:30", mock_user)
        song2 = Song("url2", "‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö 2", "4:15", mock_user)
        
        queue.add(song1)
        queue.add(song2)
        queue.current_song = song1
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        queue.loop = True
        next_song = queue.get_next()
        self.assertEqual(next_song.title, "‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1")  # ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏î‡∏¥‡∏°
        self.assertEqual(len(queue.queue), 2)  # ‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡∏π‡∏õ‡∏Ñ‡∏¥‡∏ß
        queue.loop = False
        queue.loop_queue = True
        queue.current_song = None  # ‡∏•‡πâ‡∏≤‡∏á current_song ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß
        next_song = queue.get_next()
        self.assertEqual(next_song.title, "‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1")  # ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß
        self.assertEqual(len(queue.queue), 2)  # ‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏π‡∏Å‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà‡∏Å‡∏•‡∏±‡∏ö
        
    def test_queue_operations(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß"""
        queue = MusicQueue()
        mock_user = Mock()
        mock_user.mention = "@TestUser"
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏û‡∏•‡∏á
        for i in range(5):
            song = Song(f"url{i}", f"‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö {i+1}", "3:30", mock_user)
            queue.add(song)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß
        success = queue.remove(2)  # ‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà 3
        self.assertTrue(success)
        self.assertEqual(len(queue.queue), 4)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ
        success = queue.remove(10)
        self.assertFalse(success)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß
        queue.clear()
        self.assertEqual(len(queue.queue), 0)
        
    def test_music_manager_initialization(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MusicManager"""
        self.assertEqual(len(self.music_manager.voice_clients), 0)
        self.assertEqual(len(self.music_manager.music_queues), 0)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á queue ‡πÉ‡∏´‡∏°‡πà
        queue = self.music_manager.get_music_queue(self.guild_id)
        self.assertIsInstance(queue, MusicQueue)
        self.assertEqual(len(self.music_manager.music_queues), 1)
        
    def test_url_detection(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL"""
        # URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        valid_urls = [
            "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
            "http://youtu.be/dQw4w9WgXcQ",
            "https://music.youtube.com/watch?v=dQw4w9WgXcQ"
        ]
        
        for url in valid_urls:
            self.assertTrue(self.music_manager.is_url(url), f"URL {url} ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà URL
        invalid_urls = [
            "‡∏î‡∏≤‡∏ß ‡∏û‡∏£‡∏∞‡πÄ‡∏à‡πâ‡∏≤",
            "‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏ó‡∏¢",
            "test song name"
        ]
        
        for text in invalid_urls:
            self.assertFalse(self.music_manager.is_url(text), f"‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° {text} ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô URL")

def run_async_tests():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö async"""
    
    async def test_ytdl_source():
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö YTDLSource (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï)"""
        try:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ URL ‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô)
            # search = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
            # source = await YTDLSource.create_source(search, stream=True)
            # print(f"‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á source ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {source.title}")
            print("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö YTDLSource ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï")
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á source ‡πÑ‡∏î‡πâ: {e}")
    
    # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö async
    asyncio.run(test_ytdl_source())

if __name__ == "__main__":
    print("üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏•‡∏á...")
    print("=" * 50)
    
    # ‡∏£‡∏±‡∏ô unit tests
    unittest.main(verbosity=2, exit=False)
    
    print("\n" + "=" * 50)
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Async functions...")
    
    # ‡∏£‡∏±‡∏ô async tests
    run_async_tests()
    
    print("=" * 50)
    print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
