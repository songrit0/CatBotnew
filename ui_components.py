"""
UI Components - ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Discord (Views, Modals, Buttons)
"""
import discord
from discord.ui import View, Modal, TextInput, Button, Select
from config_manager import load_config, save_config

class VoiceChannelManagerView(View):
    """View ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Voice Channels"""
    
    def __init__(self, user_id, config):
        super().__init__(timeout=300)
        self.user_id = user_id
        self.config = config
        self.update_buttons()
    
    def update_buttons(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ"""
        self.clear_items()
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ voice channels
        list_button = Button(
            label="üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (List)",
            style=discord.ButtonStyle.primary
        )
        list_button.callback = self.list_channels
        self.add_item(list_button)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° voice channel ‡πÉ‡∏´‡∏°‡πà
        add_button = Button(
            label="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà (Add)",
            style=discord.ButtonStyle.green
        )
        add_button.callback = self.add_channel
        self.add_item(add_button)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç voice channel
        edit_button = Button(
            label="‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (Edit)",
            style=discord.ButtonStyle.secondary
        )
        edit_button.callback = self.edit_channel
        self.add_item(edit_button)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö voice channel
        delete_button = Button(
            label="üóëÔ∏è ‡∏•‡∏ö (Delete)",
            style=discord.ButtonStyle.red
        )
        delete_button.callback = self.delete_channel
        self.add_item(delete_button)
    
    async def interaction_check(self, interaction):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ", ephemeral=True)
            return False
        return True
    
    async def list_channels(self, interaction):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Voice Channels"""
        await interaction.response.defer()
        
        # ‡πÇ‡∏´‡∏•‡∏î config ‡πÉ‡∏´‡∏°‡πà
        current_config = load_config()
        
        embed = discord.Embed(
            title="üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Voice Channels",
            color=discord.Color.blue()
        )
        
        if not current_config['voice_channels']:
            embed.description = "‡πÑ‡∏°‡πà‡∏°‡∏µ voice channels ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ"
        else:
            description = ""
            for i, (channel_id, channel_data) in enumerate(current_config['voice_channels'].items(), 1):
                description += f"**{i}.** <#{channel_id}>\n"
                description += f"   ‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏á: `{channel_data['empty_name']}`\n"
                description += f"   ‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô: `{channel_data['occupied_name']}`\n\n"
            embed.description = description
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï config ‡πÉ‡∏ô view
        self.config = current_config
        
        await interaction.followup.edit_message(interaction.message.id, embed=embed, view=self)
    
    async def add_channel(self, interaction):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° Voice Channel ‡πÉ‡∏´‡∏°‡πà"""
        await interaction.response.send_modal(AddChannelModal(self.user_id, self.config, self))
    
    async def edit_channel(self, interaction):
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Voice Channel"""
        # ‡πÇ‡∏´‡∏•‡∏î config ‡πÉ‡∏´‡∏°‡πà
        current_config = load_config()
        
        if not current_config['voice_channels']:
            await interaction.response.send_message("‡πÑ‡∏°‡πà‡∏°‡∏µ voice channels ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", ephemeral=True)
            return
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï config ‡πÉ‡∏ô view
        self.config = current_config
        
        await interaction.response.send_message(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å voice channel ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:",
            view=EditChannelSelectView(self.user_id, self.config, self),
            ephemeral=True
        )
    
    async def delete_channel(self, interaction):
        """‡∏•‡∏ö Voice Channel"""
        # ‡πÇ‡∏´‡∏•‡∏î config ‡πÉ‡∏´‡∏°‡πà
        current_config = load_config()
        
        if not current_config['voice_channels']:
            await interaction.response.send_message("‡πÑ‡∏°‡πà‡∏°‡∏µ voice channels ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö", ephemeral=True)
            return
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï config ‡πÉ‡∏ô view
        self.config = current_config
        
        await interaction.response.send_message(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å voice channel ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö:",
            view=DeleteChannelSelectView(self.user_id, self.config, self),
            ephemeral=True
        )

class AddChannelModal(Modal):
    """Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° Voice Channel ‡πÉ‡∏´‡∏°‡πà"""
    
    def __init__(self, user_id, config, parent_view):
        super().__init__(title="‡πÄ‡∏û‡∏¥‡πà‡∏° Voice Channel ‡πÉ‡∏´‡∏°‡πà", timeout=300)
        self.user_id = user_id
        self.config = config
        self.parent_view = parent_view
        
        self.channel_id = TextInput(
            label="Channel ID",
            placeholder="‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏Ç‡∏≠‡∏á voice channel",
            required=True
        )
        self.add_item(self.channel_id)
        
        self.empty_name = TextInput(
            label="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏á (Empty Name)",
            placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á",
            required=True
        )
        self.add_item(self.empty_name)
        
        self.occupied_name = TextInput(
            label="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô (Occupied Name)",
            placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á",
            required=True
        )
        self.add_item(self.occupied_name)
    
    async def on_submit(self, interaction):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°"""
        try:
            channel_id = int(self.channel_id.value)
            empty_name = self.empty_name.value
            occupied_name = self.occupied_name.value
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ channel ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
            channel = interaction.guild.get_channel(channel_id)
            if not channel or not isinstance(channel, discord.VoiceChannel):
                await interaction.response.send_message("‡πÑ‡∏°‡πà‡∏û‡∏ö voice channel ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏", ephemeral=True)
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ channel ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if str(channel_id) in self.config['voice_channels']:
                await interaction.response.send_message("Voice channel ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
                return
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° voice channel ‡πÉ‡∏´‡∏°‡πà
            self.config['voice_channels'][str(channel_id)] = {
                "empty_name": empty_name,
                "occupied_name": occupied_name
            }
            
            save_config(self.config)
            
            embed = discord.Embed(
                title="‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Voice Channel ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                description=f"‡πÄ‡∏û‡∏¥‡πà‡∏° <#{channel_id}> ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏á: `{empty_name}`\n‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô: `{occupied_name}`",
                color=discord.Color.green()
            )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except ValueError:
            await interaction.response.send_message("Channel ID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

class EditChannelSelectView(View):
    """View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Voice Channel ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
    
    def __init__(self, user_id, config, parent_view):
        super().__init__(timeout=60)
        self.user_id = user_id
        self.config = config
        self.parent_view = parent_view
        
        options = []
        for i, (channel_id, channel_data) in enumerate(config['voice_channels'].items()):
            options.append(discord.SelectOption(
                label=f"#{channel_id}",
                description=f"‡∏ß‡πà‡∏≤‡∏á: {channel_data['empty_name'][:50]}",
                value=channel_id
            ))
        
        select = Select(
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å voice channel ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
            options=options
        )
        select.callback = self.select_channel
        self.add_item(select)
    
    async def interaction_check(self, interaction):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ", ephemeral=True)
            return False
        return True
    
    async def select_channel(self, interaction):
        channel_id = interaction.data['values'][0]
        channel_data = self.config['voice_channels'][channel_id]
        
        await interaction.response.send_modal(
            EditChannelModal(self.user_id, self.config, self.parent_view, channel_id, channel_data)
        )

class EditChannelModal(Modal):
    """Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Voice Channel"""
    
    def __init__(self, user_id, config, parent_view, channel_id, channel_data):
        super().__init__(title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Voice Channel", timeout=300)
        self.user_id = user_id
        self.config = config
        self.parent_view = parent_view
        self.channel_id = channel_id
        self.channel_data = channel_data
        
        self.empty_name = TextInput(
            label="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏á (Empty Name)",
            placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á (‡πÉ‡∏™‡πà 'skip' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°)",
            default=channel_data['empty_name'],
            required=True
        )
        self.add_item(self.empty_name)
        
        self.occupied_name = TextInput(
            label="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô (Occupied Name)",
            placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á (‡πÉ‡∏™‡πà 'skip' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°)",
            default=channel_data['occupied_name'],
            required=True
        )
        self.add_item(self.occupied_name)
    
    async def on_submit(self, interaction):
        try:
            empty_name = self.empty_name.value
            occupied_name = self.occupied_name.value
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'skip'
            if empty_name.lower() != 'skip':
                self.config['voice_channels'][self.channel_id]['empty_name'] = empty_name
            
            if occupied_name.lower() != 'skip':
                self.config['voice_channels'][self.channel_id]['occupied_name'] = occupied_name
            
            save_config(self.config)
            
            updated_channel = self.config['voice_channels'][self.channel_id]
            embed = discord.Embed(
                title="‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Voice Channel ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                description=f"‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç <#{self.channel_id}> ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏á: `{updated_channel['empty_name']}`\n‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô: `{updated_channel['occupied_name']}`",
                color=discord.Color.green()
            )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            await interaction.response.send_message(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

class DeleteChannelSelectView(View):
    """View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Voice Channel ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö"""
    
    def __init__(self, user_id, config, parent_view):
        super().__init__(timeout=60)
        self.user_id = user_id
        self.config = config
        self.parent_view = parent_view
        
        options = []
        for i, (channel_id, channel_data) in enumerate(config['voice_channels'].items()):
            options.append(discord.SelectOption(
                label=f"#{channel_id}",
                description=f"‡∏ß‡πà‡∏≤‡∏á: {channel_data['empty_name'][:50]}",
                value=channel_id
            ))
        
        select = Select(
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å voice channel ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö",
            options=options
        )
        select.callback = self.select_channel
        self.add_item(select)
    
    async def interaction_check(self, interaction):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ", ephemeral=True)
            return False
        return True
    
    async def select_channel(self, interaction):
        channel_id = interaction.data['values'][0]
        channel_data = self.config['voice_channels'][channel_id]
        
        await interaction.response.send_message(
            f"‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö <#{channel_id}> ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
            view=DeleteConfirmView(self.user_id, self.config, self.parent_view, channel_id, channel_data),
            ephemeral=True
        )

class DeleteConfirmView(View):
    """View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö"""
    
    def __init__(self, user_id, config, parent_view, channel_id, channel_data):
        super().__init__(timeout=60)
        self.user_id = user_id
        self.config = config
        self.parent_view = parent_view
        self.channel_id = channel_id
        self.channel_data = channel_data
        
        confirm_button = Button(
            label="‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö",
            style=discord.ButtonStyle.red
        )
        confirm_button.callback = self.confirm_delete
        self.add_item(confirm_button)
        
        cancel_button = Button(
            label="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
            style=discord.ButtonStyle.grey
        )
        cancel_button.callback = self.cancel_delete
        self.add_item(cancel_button)
    
    async def interaction_check(self, interaction):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ", ephemeral=True)
            return False
        return True
    
    async def confirm_delete(self, interaction):
        try:
            deleted_channel = self.config['voice_channels'].pop(self.channel_id)
            save_config(self.config)
            
            embed = discord.Embed(
                title="‚úÖ ‡∏•‡∏ö Voice Channel ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                description=f"‡∏•‡∏ö <#{self.channel_id}> ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
                color=discord.Color.green()
            )
            
            await interaction.response.edit_message(embed=embed, view=None)
            
        except Exception as e:
            await interaction.response.send_message(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)
    
    async def cancel_delete(self, interaction):
        await interaction.response.edit_message(content="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß", view=None)

class MusicPlayerView(View):
    """View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ"""
    
    def __init__(self, music_manager, guild_id: int):
        super().__init__(timeout=300)
        self.music_manager = music_manager
        self.guild_id = guild_id
        self.is_paused = False
        
    @discord.ui.button(emoji="‚èØÔ∏è", style=discord.ButtonStyle.primary, row=0)
    async def play_pause_button(self, interaction: discord.Interaction, button: Button):
        """‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô/‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß"""
        if self.is_paused:
            success = await self.music_manager.resume_song(self.guild_id)
            if success:
                self.is_paused = False
                await interaction.response.send_message("‚ñ∂Ô∏è ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πà‡∏≠", ephemeral=True)
            else:
                await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ", ephemeral=True)
        else:
            success = await self.music_manager.pause_song(self.guild_id)
            if success:
                self.is_paused = True
                await interaction.response.send_message("‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß", ephemeral=True)
            else:
                await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà", ephemeral=True)
    
    @discord.ui.button(emoji="‚è≠Ô∏è", style=discord.ButtonStyle.secondary, row=0)
    async def skip_button(self, interaction: discord.Interaction, button: Button):
        """‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á"""
        queue = self.music_manager.get_music_queue(self.guild_id)
        current_song = queue.current_song
        
        success = await self.music_manager.skip_song(self.guild_id)
        if success:
            if current_song:
                await interaction.response.send_message(f"‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á: **{current_song.title}**", ephemeral=True)
            else:
                await interaction.response.send_message("‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà", ephemeral=True)
    
    @discord.ui.button(emoji="‚èπÔ∏è", style=discord.ButtonStyle.danger, row=0)
    async def stop_button(self, interaction: discord.Interaction, button: Button):
        """‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á"""
        await self.music_manager.stop_music(self.guild_id)
        await interaction.response.send_message("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
    
    @discord.ui.button(emoji="üîÄ", style=discord.ButtonStyle.secondary, row=0)
    async def shuffle_button(self, interaction: discord.Interaction, button: Button):
        """‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏á"""
        queue = self.music_manager.get_music_queue(self.guild_id)
        
        if not queue.queue:
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏´‡πâ‡∏™‡∏•‡∏±‡∏ö", ephemeral=True)
            return
            
        queue.shuffle()
        await interaction.response.send_message(f"üîÄ ‡∏™‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß ({len(queue.queue)} ‡πÄ‡∏û‡∏•‡∏á)", ephemeral=True)
    
    @discord.ui.button(emoji="üîÇ", style=discord.ButtonStyle.secondary, row=0)
    async def loop_song_button(self, interaction: discord.Interaction, button: Button):
        """‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        queue = self.music_manager.get_music_queue(self.guild_id)
        
        if queue.loop:
            queue.loop = False
            button.style = discord.ButtonStyle.secondary
            await interaction.response.edit_message(view=self)
            await interaction.followup.send("üîÇ ‡∏õ‡∏¥‡∏î‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", ephemeral=True)
        else:
            queue.loop = True
            queue.loop_queue = False
            button.style = discord.ButtonStyle.success
            await interaction.response.edit_message(view=self)
            await interaction.followup.send("üîÇ ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", ephemeral=True)
    
    @discord.ui.button(emoji="üîÅ", style=discord.ButtonStyle.secondary, row=1)
    async def loop_queue_button(self, interaction: discord.Interaction, button: Button):
        """‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏π‡∏õ‡∏Ñ‡∏¥‡∏ß"""
        queue = self.music_manager.get_music_queue(self.guild_id)
        
        if queue.loop_queue:
            queue.loop_queue = False
            button.style = discord.ButtonStyle.secondary
            await interaction.response.edit_message(view=self)
            await interaction.followup.send("üîÅ ‡∏õ‡∏¥‡∏î‡∏•‡∏π‡∏õ‡∏Ñ‡∏¥‡∏ß", ephemeral=True)
        else:
            queue.loop_queue = True
            queue.loop = False
            button.style = discord.ButtonStyle.success
            await interaction.response.edit_message(view=self)
            await interaction.followup.send("üîÅ ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏π‡∏õ‡∏Ñ‡∏¥‡∏ß", ephemeral=True)
    
    @discord.ui.button(emoji="üìã", style=discord.ButtonStyle.primary, row=1)
    async def queue_button(self, interaction: discord.Interaction, button: Button):
        """‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π‡∏Ñ‡∏¥‡∏ß"""
        queue = self.music_manager.get_music_queue(self.guild_id)
        
        embed = discord.Embed(
            title="üéµ ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á",
            color=discord.Color.blue()
        )
        
        # ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà
        if queue.current_song:
            embed.add_field(
                name="üéµ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô",
                value=f"**{queue.current_song.title}**\n"
                      f"‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: {queue.current_song.duration}\n"
                      f"‡∏Ç‡∏≠‡πÇ‡∏î‡∏¢: {queue.current_song.requester.mention}",
                inline=False
            )
        
        # ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á
        if queue.queue:
            queue_text = ""
            for i, song in enumerate(queue.queue[:10], 1):
                queue_text += f"{i}. **{song.title}** ({song.duration}) - {song.requester.mention}\n"
            
            if len(queue.queue) > 10:
                queue_text += f"\n... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(queue.queue) - 10} ‡πÄ‡∏û‡∏•‡∏á"
                
            embed.add_field(
                name="üìã ‡∏Ñ‡∏¥‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
                value=queue_text,
                inline=False
            )
        else:
            embed.add_field(
                name="üìã ‡∏Ñ‡∏¥‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
                value="‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß",
                inline=False
            )
            
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡∏π‡∏õ
        loop_status = ""
        if queue.loop:
            loop_status += "üîÇ ‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô\n"
        if queue.loop_queue:
            loop_status += "üîÅ ‡∏•‡∏π‡∏õ‡∏Ñ‡∏¥‡∏ß\n"
        if not loop_status:
            loop_status = "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏π‡∏õ"
            
        embed.add_field(
            name="üîÑ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡∏π‡∏õ",
            value=loop_status,
            inline=False
        )
        
        embed.set_footer(text=f"‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(queue.queue)} ‡πÄ‡∏û‡∏•‡∏á")
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @discord.ui.button(emoji="üîä", style=discord.ButtonStyle.secondary, row=1)
    async def volume_button(self, interaction: discord.Interaction, button: Button):
        """‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
        view = VolumeControlView(self.music_manager, self.guild_id)
        await interaction.response.send_message("üîä ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á", view=view, ephemeral=True)
    
    @discord.ui.button(emoji="üëã", style=discord.ButtonStyle.danger, row=1)
    async def disconnect_button(self, interaction: discord.Interaction, button: Button):
        """‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
        await self.music_manager.leave_voice_channel(self.guild_id)
        await interaction.response.send_message("üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

class VolumeControlView(View):
    """View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
    
    def __init__(self, music_manager, guild_id: int, current_volume: int = 50):
        super().__init__(timeout=60)
        self.music_manager = music_manager
        self.guild_id = guild_id
        self.current_volume = current_volume
        
    @discord.ui.button(emoji="üîâ", style=discord.ButtonStyle.secondary)
    async def volume_down(self, interaction: discord.Interaction, button: Button):
        """‡∏•‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
        new_volume = max(0, self.current_volume - 10)
        success = self.music_manager.set_volume(self.guild_id, new_volume)
        if success:
            self.current_volume = new_volume
            await interaction.response.send_message(f"üîâ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {new_volume}%", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ", ephemeral=True)
            
    @discord.ui.button(emoji="üîä", style=discord.ButtonStyle.secondary)
    async def volume_up(self, interaction: discord.Interaction, button: Button):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
        new_volume = min(100, self.current_volume + 10)
        success = self.music_manager.set_volume(self.guild_id, new_volume)
        if success:
            self.current_volume = new_volume
            await interaction.response.send_message(f"üîä ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {new_volume}%", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ", ephemeral=True)
    
    @discord.ui.button(label="50%", style=discord.ButtonStyle.primary)
    async def volume_50(self, interaction: discord.Interaction, button: Button):
        """‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á 50%"""
        success = self.music_manager.set_volume(self.guild_id, 50)
        if success:
            self.current_volume = 50
            await interaction.response.send_message("üîä ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á: 50%", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ", ephemeral=True)

class QuickMusicView(View):
    """View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏î‡πà‡∏ß‡∏ô"""
    
    def __init__(self, music_manager, guild_id: int):
        super().__init__(timeout=300)
        self.music_manager = music_manager
        self.guild_id = guild_id
    
    @discord.ui.button(label="üéµ ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà", style=discord.ButtonStyle.green, row=0)
    async def play_new_song(self, interaction: discord.Interaction, button: Button):
        """‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà"""
        modal = PlaySongModal(self.music_manager, self.guild_id)
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üìã ‡∏î‡∏π‡∏Ñ‡∏¥‡∏ß", style=discord.ButtonStyle.primary, row=0)
    async def view_queue(self, interaction: discord.Interaction, button: Button):
        """‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π‡∏Ñ‡∏¥‡∏ß"""
        queue = self.music_manager.get_music_queue(self.guild_id)
        
        embed = discord.Embed(
            title="üéµ ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á",
            color=discord.Color.blue()
        )
        
        if queue.current_song:
            embed.add_field(
                name="üéµ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô",
                value=f"**{queue.current_song.title}**\n"
                      f"‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: {queue.current_song.duration}\n"
                      f"‡∏Ç‡∏≠‡πÇ‡∏î‡∏¢: {queue.current_song.requester.mention}",
                inline=False
            )
        
        if queue.queue:
            queue_text = ""
            for i, song in enumerate(queue.queue[:5], 1):
                queue_text += f"{i}. **{song.title}** ({song.duration})\n"
            
            if len(queue.queue) > 5:
                queue_text += f"\n... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(queue.queue) - 5} ‡πÄ‡∏û‡∏•‡∏á"
                
            embed.add_field(
                name="üìã ‡∏Ñ‡∏¥‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
                value=queue_text,
                inline=False
            )
        else:
            embed.add_field(
                name="üìã ‡∏Ñ‡∏¥‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
                value="‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß",
                inline=False
            )
        
        embed.set_footer(text=f"‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(queue.queue)} ‡πÄ‡∏û‡∏•‡∏á")
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @discord.ui.button(label="üéõÔ∏è ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏û‡∏•‡∏á", style=discord.ButtonStyle.secondary, row=0)
    async def music_controls(self, interaction: discord.Interaction, button: Button):
        """‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏û‡∏•‡∏á"""
        view = MusicPlayerView(self.music_manager, self.guild_id)
        
        embed = discord.Embed(
            title="üéõÔ∏è ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏û‡∏•‡∏á",
            description="‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏û‡∏•‡∏á",
            color=discord.Color.blue()
        )
        
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

class PlaySongModal(Modal):
    """Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠ URL"""
    
    def __init__(self, music_manager, guild_id: int):
        super().__init__(title="üéµ ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å YouTube")
        self.music_manager = music_manager
        self.guild_id = guild_id
        
        self.song_input = TextInput(
            label="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠ YouTube URL",
            placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠ URL ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô...",
            style=discord.TextStyle.short,
            max_length=500,
            required=True
        )
        
        self.add_item(self.song_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ submit modal"""
        search = self.song_input.value.strip()
        
        if not search:
            await interaction.response.send_message("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠ URL", ephemeral=True)
            return
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not interaction.user.voice:
            await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô", ephemeral=True)
            return
        
        await interaction.response.defer(ephemeral=True)
        
        try:
            # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            voice_channel = interaction.user.voice.channel
            await self.music_manager.join_voice_channel(voice_channel)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß
            song = await self.music_manager.add_to_queue(
                self.guild_id, search, interaction.user
            )
            
            queue = self.music_manager.get_music_queue(self.guild_id)
            voice_client = self.music_manager.get_voice_client(self.guild_id)
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            if not voice_client.is_playing() and not voice_client.is_paused():
                await self.music_manager.play_next(self.guild_id)
                
                embed = discord.Embed(
                    title="üéµ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á",
                    description=f"**{song.title}**",
                    color=discord.Color.blue()
                )
            else:
                embed = discord.Embed(
                    title="‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß",
                    description=f"**{song.title}**",
                    color=discord.Color.green()
                )
                embed.add_field(name="‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß", value=len(queue.queue), inline=True)
            
            embed.add_field(name="‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤", value=song.duration, inline=True)
            embed.add_field(name="‡∏Ç‡∏≠‡πÇ‡∏î‡∏¢", value=interaction.user.mention, inline=True)
            
            await interaction.followup.send(embed=embed, ephemeral=True)
            
        except Exception as e:
            await interaction.followup.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", ephemeral=True)
